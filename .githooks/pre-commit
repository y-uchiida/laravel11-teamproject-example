#!/bin/bash

# ステージに載っている PHP ファイルの一覧を取得
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep '\.php$')
# 1.変更対象のPHPファイルに、PHPStan を適用する
if [ -n "$STAGED_FILES" ]; then
    if command -v docker &> /dev/null; then
        # docker コマンドがインストールされているなら、Laravel Sailでコンテナを起動しているはずなので、
        # sail コマンドを利用してコンテナ内でPHPStanを実行する
        echo "$STAGED_FILES" | xargs ./vendor/bin/sail php ./vendor/bin/phpstan analyse --memory-limit=1G
        if [ $? -ne 0 ]; then
            echo "PHPStan failed."
            exit 1
        fi
    else
        # docker コマンドが存在していない場合は、Dev containers のコンテナ内にいるはずなので、
        # コンテナ内にインストールされているPHP を利用してPHPStanを実行する
        echo "$STAGED_FILES" | xargs php ./vendor/bin/phpstan analyse --memory-limit=1G
        if [ $? -ne 0 ]; then
            echo "PHPStan failed."
            exit 1
        fi
    fi
fi

# 2.変更対象のPHPファイルに、Pint を適用する
if command -v docker &> /dev/null; then
    # docker コマンドがインストールされているなら、Laravel Sailでコンテナを起動しているはずなので、
    # sail コマンドを利用してコンテナ内でpintを実行する
    ./vendor/bin/sail php ./vendor/bin/pint --dirty --test
    if [ $? -ne 0 ]; then
        echo "Pint failed."
        exit 1
    fi
else
    # docker コマンドが存在していない場合は、Dev containers のコンテナ内にいるはずなので、
    # コンテナ内にインストールされているPHP を利用してpintを実行する
    php ./vendor/bin/pint --dirty --test
    if [ $? -ne 0 ]; then
        echo "Pint failed."
        exit 1
    fi
fi
